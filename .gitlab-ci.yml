stages:
  - build
  - testing
  - docker_build
  - docker_push

variables:
  TAG_LATEST_API: $AWS_REPOSITORY/$API_IMAGE_NAME:latest
  TAG_COMMIT_API: $AWS_REPOSITORY/$API_IMAGE_NAME:api_$CI_COMMIT_SHORT_SHA
  TAG_LATEST_FRONT: $AWS_REPOSITORY/$FRONT_IMAGE_NAME:latest
  TAG_COMMIT_FRONT: $AWS_REPOSITORY/$FRONT_IMAGE_NAME:front_$CI_COMMIT_SHORT_SHA
  DOCKER_TLS_CERTDIR: ""

build_api:
  image: node:18-alpine
  stage: build
  script:
    - cd ./back && npm i 
    - npm run build
    - tar -czf build.tar.gz ./build
  artifacts:
    paths: ['back/build.tar.gz']
    expire_in: 1 week

build_front:
  image: node:18-alpine
  stage: build
  script:
    - cd ./front && npm i 
    - export CI="false"
    - npm run build
    - rm -rf ./node_modules
    - tar -czf build.tar.gz ./build
  artifacts:
    paths: ['front/build.tar.gz']
    expire_in: 1 week

run_tests:
  image: node:18-alpine
  stage: testing
  dependencies: ['build_front', 'build_api']
  script:
    - echo "Run tests here"

build_docker_api:
  image: docker:stable
  stage: docker_build
  dependencies: ['build_api']
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
  script:
    - aws ecr get-login-password --region $AWS_REGION |
      docker login --username AWS --password-stdin $AWS_REPOSITORY
    - docker pull $TAG_LATEST_API || true
    - cd ./back
    - tar -xf ./build.tar.gz && rm ./build.tar.gz
    - docker build --cache-from $TAG_LATEST_API -t $TAG_VERSION -t $TAG_LATEST_API .
    - docker save -o build.tar $TAG_LATEST_API
  artifacts:
    paths: ['back/build.tar']
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG == null'
      variables:
        TAG_VERSION: '$TAG_COMMIT_API'
    - if: '$CI_COMMIT_TAG'
      variables:
        TAG_VERSION: '$AWS_REPOSITORY/$API_IMAGE_NAME:api_$CI_COMMIT_TAG'

build_docker_front:
  image: docker:stable
  stage: docker_build
  dependencies: ['build_front']
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
  script:
    - aws ecr get-login-password --region $AWS_REGION |
      docker login --username AWS --password-stdin $AWS_REPOSITORY
    - docker pull $TAG_LATEST_FRONT || true
    - cd ./front
    - tar -xf ./build.tar.gz && rm ./build.tar.gz
    - docker build --cache-from $TAG_LATEST_FRONT -t $TAG_VERSION -t $TAG_LATEST_FRONT .
    - docker save -o build.tar $TAG_LATEST_FRONT
  artifacts:
    paths: ['front/build.tar']
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG == null'
      variables:
        TAG_VERSION: '$TAG_COMMIT_FRONT'
    - if: '$CI_COMMIT_TAG'
      variables:
        TAG_VERSION: '$AWS_REPOSITORY/$FRONT_IMAGE_NAME:front_$CI_COMMIT_TAG'

push_docker_front:
  image: docker:stable
  stage: docker_push
  dependencies: ['build_docker_front']
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
  script:
    - aws ecr get-login-password --region $AWS_REGION |
      docker login --username AWS --password-stdin $AWS_REPOSITORY
    - cd ./front
    - docker load --input build.tar
    - echo $TAG_VERSION
    - docker push $TAG_VERSION
    - docker push $TAG_LATEST_FRONT
  rules:
    - if: '$CI_COMMIT_TAG == null'
      variables:
        TAG_VERSION: '$TAG_COMMIT_FRONT'
    - if: '$CI_COMMIT_TAG'
      variables:
        TAG_VERSION: '$AWS_REPOSITORY/$FRONT_IMAGE_NAME:front_$CI_COMMIT_TAG'

push_docker_api:
  image: docker:stable
  stage: docker_push
  dependencies: ['build_docker_api']
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
  script:
    - aws ecr get-login-password --region $AWS_REGION |
      docker login --username AWS --password-stdin $AWS_REPOSITORY
    - cd ./back
    - docker load --input build.tar
    - echo $TAG_VERSION
    - docker push $TAG_VERSION
    - docker push $TAG_LATEST_API
  rules:
    - if: '$CI_COMMIT_TAG == null'
      variables:
        TAG_VERSION: '$TAG_COMMIT_API'
    - if: '$CI_COMMIT_TAG'
      variables:
        TAG_VERSION: '$AWS_REPOSITORY/$API_IMAGE_NAME:api_$CI_COMMIT_TAG'